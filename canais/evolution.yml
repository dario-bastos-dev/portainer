services:
  evo-redis:
    image: redis:8-alpine
    hostname: "{{.Service.Name}}.{{.Task.Slot}}" 
    command: redis-server --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data_evo:/data
    networks:
      - dev-network
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  evolution:
    image: evoapicloud/evolution-api:latest
    hostname: "{{.Service.Name}}.{{.Task.Slot}}" 
    restart: always
    environment:
      - AUTHENTICATION_API_KEY=${EVOLUTION_API_KEY}
      - SERVER_TYPE=http
      - SERVER_PORT=8080
      - SERVER_URL=https://evo.<YOUR_DOMAIN>
      - LOG_LEVEL=ERROR,WARN,DEBUG,INFO,LOG,VERBOSE,DARK,WEBHOOKS
      # Postgres
      - DATABASE_ENABLED=true
      - DATABASE_PROVIDER=postgresql
      - DATABASE_CONNECTION_URI=postgresql://admin:${POSTGRES_PASSWORD}@postgres:5432/evolution
      - DATABASE_CONNECTION_CLIENT_NAME=evolution_exchange
      - DATABASE_SAVE_DATA_INSTANCE=true
      - DATABASE_SAVE_DATA_NEW_MESSAGE=true
      - DATABASE_SAVE_MESSAGE_UPDATE=true
      - DATABASE_SAVE_DATA_CONTACTS=true
      - DATABASE_SAVE_DATA_CHATS=true
      - DATABASE_SAVE_DATA_LABELS=true
      - DATABASE_SAVE_DATA_HISTORIC=true
      # Redis
      - CACHE_REDIS_ENABLED=true
      - CACHE_REDIS_URI=redis://evo-redis:6379/0
      - CACHE_REDIS_PREFIX_KEY=evolution
      - CACHE_REDIS_SAVE_INSTANCES=false
      - CACHE_REDIS_SAVE_MESSAGES=false
      # MinIO
      - S3_ENABLED=true
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_BUCKET=evolution
      - S3_PORT=443
      - S3_ENDPOINT=minio
      - S3_USE_SSL=true
      # Options
      - QRCODE_LIMIT=1902
      - LANGUAGE=pt-BR
      - DEL_INSTANCE=false
      # Session
      #- CONFIG_SESSION_PHONE_VERSION=2.3000.1023204200
      - CONFIG_SESSION_PHONE_CLIENT=Evolution_API
      - CONFIG_SESSION_PHONE_NAME=Chrome
    volumes:
      - evolution_instances:/evolution/instances
      - evolution_store:/evolution/store
    networks:
      - traefik-public
      - dev-network
    deploy:
      labels:
        # --- Configuração do Traefik ---
        - traefik.enable=true

        # --- Roteador ---
        - traefik.http.routers.evolution.rule=Host(`evo.<YOUR_DOMAIN>`)
        - traefik.http.routers.evolution.entrypoints=websecure
        - traefik.http.routers.evolution.service=evolution
        - traefik.http.routers.evolution.tls.certresolver=letsencrypt
        
        # --- Serviço ---
        - traefik.http.services.evolution.loadbalancer.server.port=8080
        - traefik.http.services.evolution.loadbalancer.passHostHeader=true
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager

volumes:
  evolution_instances:
  evolution_store:
  redis_data_evo:

networks:
  dev-network:
    external: true
  traefik-public:
    external: true